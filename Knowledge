PROGRAMMING LEANGUAGE: BUILDING WEB APPLICATIONS

HTML is for         "NOUNS"               <p></p>        means  paragraph
CSS is for          "ADJECTIVES"          p {color: red} means the paragraph is  red
JAVASCRIPT is for   "VERBS"               p.hide();      means  hide the paragraph



JS for FRONTEND
JS + Node.js for BACKEND 




alert();                      Showing to the client in the browser
console.log();                Showing to the developer
console.log(x, y, z);         Showing multiple values at ones


open console in chrome `shortcut
option + cmd + j



GOES ALWAYS into the END of the Body of the HTML File
<script></script>




          STRING INTERPOLATION
          ____________________


var myName = 'Tobias';
var myCity = 'Porto';
console.log(`My name is ${myName}. My favorite city is ${myCity}.`);      // with the ``we can use ... directly
                        
My name is Tobias. My favorite city is Porto.
                        



          CLASSES
          _______
      

The body of a class is the part that is in curly brackets {}. This is where you define class members, such as methods or constructor.
!- in classes we have to use arrow function inside of a function (to refer to the overall class)

            
            
                        
          CLASSES  & >  METHODS
          _____________________
      

constructor()    -> The constructor method is a special method for creating and initializing an object created with a class.
filter()         -> https://www.w3schools.com/jsref/jsref_filter.asp

In JavaScript, the filter() method allows us to filter through an array - iterating over the existing values, and returning only the ones 
that fit certain criteria, into a new array.

.querySelector() -> The Document method querySelector() returns the first Element within the document that matches the specified selector


reduce method    -> "we started with many things and REDUCED it down to one thing"

optional add start value 0




          RETURN STATEMENT
          ________________


The return statement stops the execution of a function and will not further continue the function.
                
                
         return;  
         
         or

         return = 0;  Can also have a value
         
         
    function getRectArea(width, height) {
    if (width > 0 && height > 0) {
    return width * height;
    }
    return 0;
    }

    console.log(getRectArea(3, 4));
    // expected output: 12

    console.log(getRectArea(-3, 4));
    // expected output: 0
    
    
    
Redirect:

 if (err) {
      return res.redirect('/reset');  ---> This Line
    }
    
    
    
    
          THROW STATEMENTS   
          ________________
      
    
throw statement:         https://www.w3schools.com/jsref/tryit.asp?filename=tryjsref_state_throw_error


Example: Please input a number between 5 and 10:

                  ghjgh     Test Input

                  Input not a number (NaN)


                  if(x == "")  throw "is Empty";
                      if(isNaN(x)) throw "not a number";
                      if(x > 10)   throw "too high";





          CRUD Operarations
          _________________


LETTER	OPERATION	  HTTP REQUEST	  SQL FUNCTION

C	      Create  	  POST	          INSERT
R	      Read	      GET	            SELECT
U	      Update    	PATCH/PUT(if you have id or uuid)	UPDATE
D	      Delete	    DELETE	        DELETE






         DATA TYPES (Values have a type, NOT the variables)
         __________


The 7 primitive Data Types:  (all other things are Objects) 

String = a String of Charakters -> a string/sequence of charakters -> '' or ""
Numbers = 123
Booleon = true or false
____________________ MOST IMPORTANT DATA TYPES

4. Undefined (empty value)
5. Null (empty value)
6. Symbol (ES2015)
7. BigInt (ES2020)


-> with typeof(); -> we can find out what data type we have
-> console.log(typeof PI);
SAME -> console.log(typeof(PI));





Type Conversion
_______________


Converting strings to numbers and others


we can convert 3 data types:

1. to number
2. to strings
3. to booleons



const inputYear = '1991';
console.log(inputYear + 18);
//       -> Number
console.log(Number(inputYear), inputYear);  // converting a string 
console.log(Number(inputYear) + 18);





Type Coercion
_____________


let n = '1' + 1;    // '11'   -> string
n = n - 1;
console.log(n);     //  10    -> Number






         VARIABLES (are like boxes with a package inside (or which hold an object inside))
         _________


Ways to declare a Variable:

var = variable -> you can reassign a new value what is inside the keyword       // should be completelly avoided
let = modern ddeclaring of an variable -> can be reassigned in the future       // should be only used if we rly wanna reassing a value later


Example:

let test = 123;
console.log(test);  -> 123
// reassigning
test = 'successfull';
console.log(test);  -> successfull


const = constant -> can not be reassigned, its a Constant                       // should be used aas much as possible



Variables inside a function are all LOCAL

Variables outside a function are all GLOBAL



Syntax:

Keyword Name    Value          ->       we store values in variables
 â†“       â†“        â†“
var   myName = "Tobias";     


console.log(myName);           ->       shows us which value is inside the "box"



Naming:

myVar
my_var
myVar123

123myVar -> in js var names cant start with numbers!





          OBJECTS
          _______
          
          
const object = {
  num: 5          // => thats a PROPERTIE (inside of the object) with a VALUE
};     

console.log(object.num);    //  . -> access PROPERTIE inside of an object
          
          



          FUNCTIONS
          _________
          

Creating a function:

Keyword   Name  Input
 â†“         â†“    â†“ 
function doThis( ) {
  serie of instruction
  ...
  ...
}

-> if we call the function everything between the {} will be executed

CALL the function:

doThis();



slice                 var name = Tobias;
                      name.slice(0,1);  -> from 0 to 1 BUT not including charakter at 1
                      
// slicing at 140 charakters

var sliceAt140 = 'hahhhhlloossskssksskshjdhsjhssdjssshajshdkjahsdggahdgjasgjdgsahhdgahsdghasjgdjshagjsahhajshdkasshjfhjkdhfassssssjhjshjkahsjhdajshdsajdhadgajdgakjsgdasgdsagdkjgjsajdgasjdgsajdgsajdgasjdgajsdgkaskskksksksdgssssssss';
var sliceAt140 = sliceAt140.slice(0,140);
console.log(sliceAt140.length);
console.log(sliceAt140);                    


// First Letter Big and all others small
var myName = 'toBIaS';
var myName =  myName.slice(0,1).toUpperCase() + myName.slice(1, myName.length).toLowerCase();
console.log(myName);





ARROW FUNCTION
______________


fetch(url)
  .then(res => res.json())
  .then(json => console.log(json));
  
 
 
 // thats the same without an arrow function
.attr('fill', function(data){return d.fill;}

// as arrow function
.attr('fill', data => data.fill)
  




          OPERATORS
          _________
          
          
// Assignment Operators          
let x += 10;  // x = x + 10    
x *= 4;       // x = x * 40 
x++;          // x = x + 1
x--;          // x = x - 1
          

// Comparison Operators
let x = 10;
let y = 5;
x > y;    // true
x < y;    // false





OPERATOR PRECEDENCE in JS
_________________________

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence
-> scroll down to the table ->


________________________________________________________________________________
Precedence	Operator type	Associativity	Individual operators
18	Grouping	n/a	( â€¦ )
...
...
...


Math Operators will be executed before coparison operators for example

-> thats what we see in this table, but we dont have to know/remind all



EQUALITY OPERATORS
__________________

== vs. ===          (returns true or false value)

=== exactly         (actually always use this!)
==                  (actually never use this)

=== (does not type coersion)            '18' + 18           -> false
==  (does type coersion)                '18' + 18           -> true


!== NOT equal





          NUMBERS
          _______
          

Operators:


Random Number:

(Math.floor(Math.random()*100) + d.properties.mag))

Math.floor:
static method always rounds down and returns the largest integer less than or equal to a given number.


2 ** 3 means 2 * 2 * 2 = 8





          TEMPLATE LITERALS `` (ES6)
          __________________________
          
 
We can write it like a Sentence, and just have to put in the ` ${var} ....   ` 
or just writing a normal sentence/ string with ``is also possible:

-> console.log(`This is a sentence written with just template literals`);


const firstName = 'Jonas';
const job = 'teacher';
const birthYear = 1991;
const year = 2037;


const jonasNEW = `Iam ${firstName}, a ${year - birthYear} year old ${job}!`


NOTE: Thats the old way ->

const jonas = 'Iam' + firstName + ', a ' + (year - birthYear) + ' years old ' + job + '!';






          IF and ELSE STATEMENTS (for taking decisions)
          ______________________
        
      
? is a if statement ,  : is a else statement in a single line

IF and ELSE Statments

&& AND
|| OR
!  NOT or the Opposite
!== NOT equal


Syntax:

    condition is always a booleon
if (condition) {                        // => Initial condition
} else if {
} else if {                             // that are all different `conditions
} else {
}

when we have more than 5 statements, its recommended to use then a -> SWITCH statement



const age = 14;

   //condition
if (age >= 18) {  // if its true
  console.log('Sarah can make a driving licence ðŸš—');
} else {          // if its false
  const yearsLeft = 18 - age;
  console.log(`Sarah is nor old enough to make a car license! wait another ${yearsLeft} years!`)
};




NOTE:
//any var inside the "code blocks" will not be accessable OUTSIDE of a "code block"


const birthyear = 1998;

let century;  // thats OUTSIDE
if (birthyear <= 2000) {        //
  century = '20 century';       // thats a "code block" inside the {}
} else {                        //
  century = '21 century';       //
};                              // thats a "code block" inside the {}

//any var inside the "code blocks" will not be accessable OUTSIDE of a "code block"
console.log(century);         // not accessable!
// -> century has to be declared OUTSIDE








          TRUTHY FALSY
          ____________


The Concept:
          
5 falsy values: 0, '', undefined, NULL, NaN       ->        will become false, when we convert into a booleon

console.log(Booleon(0));                ->        false     falsy
console.log(Booleon(undefined));        ->        false     falsy
console.log(Booleon('Jonas));           ->        true      truthy values
console.log(Booleon({}));               ->        true      truthy values
console.log(Booleon(''));               ->        false     falsy





         

          LOOPS 
          _____
         

FAB: bei for loops hat man ja meistens eine menge
     while nutzt man, solange ein "zustand" noch nicht erreicht ist und den erst herstellen muss



while loop
__________

while = is a checking a condition -> infinite loop until it turns from true to false

var i = 1;

while (i<2) {
  console.log(i);
  i++;
}



for loop
________

    Start End  Change
      â†“    â†“    â†“ 
for (i=0; i<5; i++;) {
  // do something
}

for (let i=0; i<5; i++;) {
  console.log(i);
}





          ARRAYS
          ______

//     i = index:0, 1, 2    // i is the positon in the of the item in the array
var dataArray = [4, 15, 34];  // array without objects

// array with objects inside of the array
var dataArray = [
  {width: 25, height: 4, fill: 'red'},
  {width: 25, height: 15, fill: 'red'},
  {width: 25, height: 34, fill: 'red'}
];





          jQUERY
          ______

jQuery is a library for Javascript

https://developers.google.com/speed/libraries/



$() -> select one or all items


Event Listener:
- will be called whenever the specified event is delivered to the target
                                        .click
                                        .keypress
                                        .

element.addEventListener("click", function(){ alert("Hello World!"); });


// Eventlistener for keydown event

$(document).keydown(function(event) {
    $("h1").text(event.key);
    console.log(event.key);
});


Animations:
$().animate({})






          COUNTER
          _______  
      
const s = date.getSeconds();
const procent100 = 60;                                         // Wichtig und richtig
var currentPercentS = Math.floor(s / procent100 * 100);
console.log(s);
console.log(currentPercentS + "% of 1 Minute");


TIME IN REALTIME

include in html file ->

<script>
`use strict`;
function refreshTime() {
  const timeDisplay = document.getElementById("time");
  const dateString = new Date().toLocaleString();
  const formattedString = dateString.replace(", ", " - ");
  timeDisplay.textContent = formattedString;
}
  setInterval(refreshTime, 1000);
</script>

______________________________________________



