          High Level
          
          
          
NOTE: 1. Code runs inside of the executions context
      2. Javascript runs inside of a call stack




          A JAVASCRIPT ENGINE (there are mutiple)
          ___________________


is a programm that executes javascript code

- every browser has its owm javascript engine
- google chrome's js engine calls v-eight


ENGINE COMPONENTS AND HOW IT WORKS
__________________________________


every js engine contains a    CALL STACK                                 and a                   HEAP

                              is using "execution context"                                      unstructured memory pool, objects in memory
                              
                              execution context
                              
                              execution context             (single one after the other one will be executed) -> Javascript can only do one thing at the time!!!
                              
                              execution context
                              
                              where the code is executed                                        stores all the object which our programm needs
                              for callback-functions??





COMPILATION AND INTERPRETATION
______________________________  
          
          
Maschine Code 0010101010001111000101010010  

The processor CPU of a computer just understand maschine code


Compilation: Entire code is converted into maschine code at once, and written to a binary file that can be executed by a computer. (fast)


Interpretation: Interpreter runs trough the source code and executes it line by line. (slow)


Just-in-time (JIT) compilation: Entire code is converted into maschine code at once, then executed immediately.                   JAVASCRIPT (today)





          JAVASCRIPT RUNTIME
          __________________


                              OUTSIDE OF A BROWSER                                                                IN THE BROWSER

          node.js is a javascript runtime -> to run js outside of a browser                                 the browser is also a runtime
          has no (access to WEB APIs)                                                                       access to WEB APIs
          instead C++ BINDINGS & THREAD POOL (nice to know)


- without an engine there is no runtime
- we always need also access to the WEB APIs
- includes a "Callback-Queue" -> includes all the CALLBACK-FFUNCTIONS that are ready to be executed

Event-Handler-Functions -> are called Callback-Functions

as the event happens -> the callback function will be called -> the EVENT LOOP is doing this




          EXECUTION CONTEXT
          _________________


NOTE: 1. Code runs inside of the executions context
      2. Javascript runs inside of a call stack
      
      
Whats inside Execution Context?
 
1. Variable Evironment
2. Scope Chain
3. this keyword               (not in arrow functions)
  

The 3 Types of (things which creates) Scope
___________________________________________

"Scope is the Place where variables are declared."


          GLOBAL SCOPE                  FUNCTION SCOPE                BLOCK SCOPE (ES6)
          
          For Top Level Code            var are only accessible       Code Blocks {}
          outside of any function       inside of a function          everything between {}
          var accessible everywhere     also called local scope       if statements, loops etc.
          (global variable)             (local variables)             only for let and const variables
          
                                        NOTE: if we try to access the var from outside of the funtion, we will get an REFERENCE ERROR
                                        
                                        
                                        
NOTE: We have a nested structure of scope

      The Global scope contains the first scope and the second scope could be contained inside of the first scope for example -> in this case ->
      ALL "child scopes" has access to his "parent scopes" -> so they can know the value of the variables
      
      -> This is/means the SCOPE CHAIN
